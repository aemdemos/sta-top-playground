name: site-transfer-agent-coordinator - Download and extract Import zip and upload contents to SharePoint

# TODO
# 1) incorporate fstab.yml to determine mountpoints and folders instead of passing them in.
# 2) Use the issue context to determine import zip (and still allow it as an optional parameter)
# 3) Use the error callback for errors.

on:
  workflow_dispatch:
    inputs:
      zip_url:
        description: 'The URL of the zip file to download'
        required: true
        default: 'https://spacecat-scraper.s3.us-east-1.amazonaws.com/imports/f27b4729-00ea-48e5-b3ca-8fbc7605d28a/import-result.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAUDXQXZO4FC7DS2OW%2F20250327%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250327T141404Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEN3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJIMEYCIQC8SBdmu2%2BXE3poTFu%2FRZemqBg0J9ByrMXBB3duawh3DAIhAOwrXqUDZ1DI9fjX78mDUqvkS92e%2Fnjgnewd6O%2FIKI8AKpEDCEYQAxoMMjgyODk4OTc1NjcyIgyp9Or%2BVyt9r8gD2lkq7gI8Sb9a9PtsgNE5vQ7BV8UD0hpTwGZ4BbihPh5ahNfjM3B8bLbB9TMJur6HhGQU03QRK3dnSCdo1esGt8DWNF27bWAi5RBn2vtaQl88LYXuVHx34olaQHY0Tp2P4v3BqBKkcJjQU1q1AbTJpLHU2r6aeUAanFaGTr8aLJ7I1wUxG6lQB4pbCvjrr424%2BAHrWOCRfeswb5uXIPWcV360gj73z9ifLDBBJjIbeJery3DWS64zXIUJnShrgXGqgWWd%2FxYyGKyaoB9rRL2CZak0PMkDXHtTxYwwJ6iBL4R3f560lkN%2Fpn53edMk%2Ffpw8Q808SsR9zmJs7%2BjDA4vIprdas7MjM4g0i5eu%2B9ONjtp9JJ0zR1dn%2BMpFbQXD7xqvFJZc7mtznR5wIDGWXB1SHarR0neYpFSek1OXKuWIa0JbhUb1LUvk%2BrNHCeLjT9rnm8mi6G'
      aemy_callbacks:
        description: 'The AEMY context as a string.'
        required: true
        default: "{\"ok\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/ok/aemdemos/sta-top-playground/36\",\"error\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/error/aemdemos/sta-top-playground/36\",\"progress\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/progress/aemdemos/sta-top-playground/36\",\"apiKey\":\"bAfZqyBfo05H1ANCbxKzB1Y7KkR4yofDKI6hXNq7\"}"
      aemy_context:
        description: 'The AEMY context as a string.'
        required: true
        default: "{\"project\":{\"owner\":\"aemdemos\",\"repo\":\"sta-top-playground\",\"defaultBranch\":\"main\"},\"conversation\":{\"id\":35,\"instruction\":\"Analyzesite\",\"input\":\"\",\"plan\":[\"Site-urls\",\"Step2\"]},\"development\":{\"issueId\":35,\"branch\":\"issue-35\",\"changed\":false,\"changes\":[]},\"agentIndex\":1,\"agentCalls\":[{\"agentId\":\"ghagent\",\"function\":\"gh_create_branch\",\"parameters\":{}},{\"agentId\":\"inventory\",\"function\":\"site-urls\",\"parameters\":{\"url\":\"https://unifyrare.com/\"}},{\"agentId\":\"ghagent\",\"function\":\"gh_create_pull_request\",\"parameters\":{}},{\"agentId\":\"ghagent\",\"function\":\"gh_request_linting\",\"parameters\":{}}]}"
      mountpoints:
        description: 'The mountpoints to upload the zip content to'
        required: true
        default: 'getting_there'
      folders:
        description: 'The folders to upload the zip file to'
        required: true
        default: 'getting_there'
      sharepoint_upload_url:
        description: 'The URL to use for the Sharepoint upload.'
        required: true
        default: 'getting_there'

permissions:
  contents: write

jobs:
  read-and-upload-import-zip:
    runs-on: ubuntu-latest

# if [ -z "${{ secrets.IMPORT_DOWNLOAD_API_KEY }}" ]; then
# echo "Error: IMPORT_DOWNLOAD_API_KEY is not set."
# exit 1
# fi
    steps:
      - name: Check inputs
        run: |
          if [ -z "${{ secrets.SHAREPOINT_ACCESS_TOKEN }}" ]; then
            echo "Error: SHAREPOINT_ACCESS_TOKEN is not set."
            exit 1
          fi
          if [ -z "${{ github.event.inputs.zip_url }}" ]; then
            echo "Error: Import Zip URL is not set."
            exit 1
          fi
          if [ -z "${{ github.event.inputs.mountpoints }}" ]; then
            echo "Error: Sharepoint mountpoints are not set."
            exit 1
          fi
          if [ -z "${{ github.event.inputs.sharepoint_upload_url }}" ]; then
            echo "Error: Sharepoint upload url is not set."
            exit 1
          fi
          # Create temp directory to download the zip and extract its contents into.
          temp_dir=$(mktemp -d)
          echo "temp_dir=${temp_dir}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get install -y unzip
          sudo apt-get install jq

      - name: Set up the callback URLs
        run: |
          if [ -z "${{ github.event.inputs.aemy_callbacks }}" ]; then
            echo "Warning: Status call backs will not be executed. Missing callback in the context."
          else
            echo "Context: ${{ github.event.inputs.aemy_callbacks }}"
            ok_callback_url=$(echo '${{ github.event.inputs.aemy_callbacks }}' | jq -r '.ok')
            error_callback_url=$(echo '${{ github.event.inputs.aemy_callbacks }}' | jq -r '.error')
            progress_callback_url=$(echo '${{ github.event.inputs.aemy_callbacks }}' | jq -r '.progress')
            callback_apikey=$(echo '${{ github.event.inputs.aemy_callbacks }}' | jq -r '.apikey')
            echo "ok_callback_url=${ok_callback_url}" >> $GITHUB_ENV
            echo "error_callback_url=${error_callback_url}" >> $GITHUB_ENV
            echo "progress_callback_url=${progress_callback_url}" >> $GITHUB_ENV
            echo "callback_apikey=${callback_apikey}" >> $GITHUB_ENV
          fi
          
          echo "ok_callback_url=${ok_callback_url}"
          
          if [ -z "${{ env.callback_apikey }}" ] -o [ "${{ env.callback_apikey }}" -eq "null" ]; then
            echo "Warning: Status call backs will not be executed. Missing api key."
            callback_apikey=''
          fi
          if [ -z "${{ env.ok_callback_url }}" ] -o [ "${{ env.ok_callback_url }}" -eq "null" ]; then
            echo "Warning: OK status call backs will not be executed. Missing ok url."
            ok_callback_url=''
          fi
          if [ -z "${{ env.error_callback_url }}" ] -o [ "${{ env.error_callback_url }}" -eq "null" ]; then
            echo "Warning: Error status call backs will not be executed. Missing error url."
            error_callback_url=''
          fi
          if [ -z "${{ env.progress_callback_url }}" ] -o [ "${{ env.progress_callback_url }}" -eq "null" ]; then
            echo "Warning: Progress status call backs will not be executed. Missing progress url."
            progress_callback_url=''
          fi

          # Ensure change from 'null' to '' is set in the environment.
          echo "ok_callback_url=${ok_callback_url}" >> $GITHUB_ENV
          echo "error_callback_url=${error_callback_url}" >> $GITHUB_ENV
          echo "progress_callback_url=${progress_callback_url}" >> $GITHUB_ENV
          echo "callback_apikey=${callback_apikey}" >> $GITHUB_ENV

      - name: Report download progress
        run: |
          if [ -n "${{ env.progress_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
             -H "Content-Type: application/json" \
             -X POST \
             -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Downloading zip...\" }}" \
             ${{ env.progress_callback_url }}
          fi

      - name: Download import zip file
        run: |
          echo "Downloading the import zip to ${{ env.temp_dir }}..."
          curl -Lo "${{ env.temp_dir }}/import.zip" "${{ github.event.inputs.zip_url }}" 2>&1 \
           || { echo "Import zip cannot be fetched yet. Please wait a few minutes and try again."; }

      - name: Report extraction progress
        run: |
          if [ ! -f "${{ env.temp_dir }}/import.zip" ]; then
            if [ -n "${{ env.error_callback_url }}" ]; then
              curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Failed to download zip...\" }}" \
               ${{ env.error_callback_url }}
            fi
            echo " Import zip file not found. Check the output of the previous step. Exiting."
            exit 1
          else 
            chmod 755 "${{ env.temp_dir }}/import.zip"
            ls -hl "${{ env.temp_dir }}/import.zip"
            if ! file "${{ env.temp_dir }}/import.zip" | grep -q 'Zip archive data'; then
              if [ -n "${{ env.error_callback_url }}" ]; then
                curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
                 -H "Content-Type: application/json" \
                 -X POST \
                 -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Downloaded file is not a valid zip file.\" }}" \
                 ${{ env.error_callback_url }}
              fi
              echo "Downloaded file is not a valid zip file. Exiting."
              exit 1          
            fi
            if [ -n "${{ env.progress_callback_url }}" ]; then
              curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Extracting zip...\" }}" \
               ${{ env.progress_callback_url }}
            fi
          fi

      - name: Extract import zip contents
        run: |
          unzip ${{ env.temp_dir }}/import.zip -d "${{ env.temp_dir }}/content" \
          || { echo "Extraction of the Import zip failed. Please wait a few minutes and try again."; exit 1; }

      - name: Report upload progress
        run: |
          if [ -n "${{ env.progress_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
             -H "Content-Type: application/json" \
             -X POST \
             -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Uploading context...\" }}" \
             ${{ env.progress_callback_url }}
          fi

      - name: Upload content to SharePoint
        run: |
          for file in ${{ env.temp_dir }}/content/*; do
            curl -X POST -H "Authorization: Bearer ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}" \
            -F "file=@$file" ${{ github.event.inputs.sharepoint_upload_url }} \
          || { echo "Upload to Sharepoint failed. Please wait a few minutes and try again."; exit 1; }
            # Preview the file now?  Or wait until all files are uploaded?
          done

      - name: Report upload success
        run: |
          echo "upload to Sharepoint was successful" > success_message.txt
          if [ -n "${{ env.ok_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
              -X POST \
              -F 'response={"message": "Upload successful"}' \
              -F "status_file=@success_message.txt" \
              ${{ env.ok_callback_url }}
          fi

      - name: Clean up temporary files
        if: always()
        run: |
          # Delete the temp dir immediately, having system delete it eventually as a redundancy.
          rm -rf "${{ env.temp_dir }}"
