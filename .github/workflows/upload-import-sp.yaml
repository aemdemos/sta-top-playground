name: site-transfer-agent-coordinator - Download and extract Import zip and upload contents to SharePoint

# TODO
# Use the issue context to determine import zip (and still allow it as an optional parameter)

env:
  SHAREPOINT_CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
  SHAREPOINT_TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
  SHAREPOINT_CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}

on:
  workflow_dispatch:
    inputs:
      # Zip is only valid for 60 minutes.
      zip_url:
        description: 'The URL of the zip file to download'
        required: true
        default: 'https://spacecat-scraper.s3.us-east-1.amazonaws.com/imports/e8e5961a-3de0-479d-b477-25339ae3ae0d/import-result.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAUDXQXZO4GOJA2ZVH%2F20250401%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250401T135913Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEFYaCXVzLWVhc3QtMSJHMEUCIHc7Dix%2B2DDxsFqW%2FLQe%2FLBnf%2BcEPchVI00%2FqCbdHAFpAiEAjRZheQEfyNvYi0g8IyQXTR9%2FALw0hsbMi1jBWcQSZ9gqmgMIv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwyODI4OTg5NzU2NzIiDENOflkC4Ov5c1sqZyruAkm2YROrGgRBmb4uaW%2Bj9AHWecuNDFNgJWDEzi0Sjs8Y2QsYDFWY%2F8cUTH8hhBXzLyYE4OPtnevlIh9a%2FxflaXY3bVo1JBHn%2FgwamYI5mhOV1QUy6kJL0Oms9Cr0LhBJe3ZcQei4c0GQuZBaonmEnVAUEf7EDqNeSC9Am%2FgjsKxLP5tqYwbX3moRttfL%2Fy69M35zTk78M95AjHuwcxcVCKazU5ZLu1%2F70AeJ%2BeWOZii5WWTev7Eh0wp1DTpKBg7k%2BRoxBhf3Lba5iI4mg9aGnZmtaBwZ9Um3%2FbJYBhV%2Bn4AC86qB5tj%2FQRKc%2BVFcB5xNZ%2B8ALTkMkp7F%2Fr2QWwhmn%2FZNJyyh%2BXNcARZ4PcOl7mZ3V839PysPcHfOCKPDqFJCTR7CyWiUacADMQs90ZLq57rmx8yaUNt8npz9%2BIxZ8TGt97YKn75EwU3U3qrNvolA5jiwHmpoVzJM12b9BvpkYWJTAj%2Ft919G9Y%2BC7ggzIzCm1a%2B%2FBjqdAXcYvft6AonbD%2FRmVta6MHZJljJ3kxu3za4l6ZR%2FKW7trQbGzy8xdz%2Bf2gXELe0Qxhn%2FVjB9YVXhCid3Ib2CgyLTu3KIzbdekq8IGtA1VSIiuwy0QNWPinA30auRkNQycandoga%2FIUJKkjrfFY4UsTJVDewrQ3TlsckVq7JHR1sxLA8JmZWyh7o6vYdw3SwyiHRf%2B4AnOQfzEXIZSns%3D&X-Amz-Signature=2702d7bc18aa974a55aa90b5b2d990317d38adad29261d18c0e43fe756aa1ded&X-Amz-SignedHeaders=host&x-id=GetObject'
      aemy_callbacks:
        description: 'The AEMY context as a string.'
        required: true
        default: "{\"ok\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/ok/aemdemos/sta-top-playground/36\",\"error\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/error/aemdemos/sta-top-playground/36\",\"progress\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/progress/aemdemos/sta-top-playground/36\",\"apiKey\":\"bAfZqyBfo05H1ANCbxKzB1Y7KkR4yofDKI6hXNq7\"}"
      aemy_context:
        description: 'The AEMY context as a string.'
        required: true
        default: "{\"project\":{\"owner\":\"aemdemos\",\"repo\":\"sta-top-playground\",\"defaultBranch\":\"main\"},\"conversation\":{\"id\":35,\"instruction\":\"Analyzesite\",\"input\":\"\",\"plan\":[\"Site-urls\",\"Step2\"]},\"development\":{\"issueId\":35,\"branch\":\"issue-35\",\"changed\":false,\"changes\":[]},\"agentIndex\":1,\"agentCalls\":[{\"agentId\":\"ghagent\",\"function\":\"gh_create_branch\",\"parameters\":{}},{\"agentId\":\"inventory\",\"function\":\"site-urls\",\"parameters\":{\"url\":\"https://unifyrare.com/\"}},{\"agentId\":\"ghagent\",\"function\":\"gh_create_pull_request\",\"parameters\":{}},{\"agentId\":\"ghagent\",\"function\":\"gh_request_linting\",\"parameters\":{}}]}"

permissions:
  contents: write

jobs:
  read-and-upload-import-zip:
    runs-on: ubuntu-latest

    steps:
      - name: Check inputs
        run: |
          npm --version
          if [ -z "${{ env.SHAREPOINT_CLIENT_SECRET }}" ]; then
            echo "Error: SHAREPOINT_CLIENT_SECRET is not set."
            exit 1
          fi
          if [ -z "${{ env.SHAREPOINT_TENANT_ID }}" ]; then
            echo "Error: SHAREPOINT_TENANT_ID is not set in the GitHub secrets."
            exit 1
          fi
          if [ -z "${{ env.SHAREPOINT_CLIENT_ID }}" ]; then
            echo "Error: SHAREPOINT_CLIENT_ID is not set in the GitHub secrets."
            exit 1
          fi
          if [ -z "${{ github.event.inputs.zip_url }}" ]; then
            echo "Error: Import Zip URL is not set."
            exit 1
          fi
          # Create temp directory to download the zip and extract its contents into.
          temp_dir=$(mktemp -d)
          echo "temp_dir=${temp_dir}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get install -y unzip
          sudo apt-get install jq

      - name: Set up the callback URLs
        run: |
          if [ -z "${{ github.event.inputs.aemy_callbacks }}" ]; then
            echo "Warning: Status call backs will not be executed. Missing callback in the context."
          else
            callback_apikey=${{ fromJSON(github.event.inputs.aemy_callbacks).apikey }}
            ok_callback_url=${{ fromJSON(github.event.inputs.aemy_callbacks).ok }}
            error_callback_url=${{ fromJSON(github.event.inputs.aemy_callbacks).error }}
            progress_callback_url=${{ fromJSON(github.event.inputs.aemy_callbacks).progress }}
          fi
          
          echo "ok_callback_url=${ok_callback_url}"
          
          if [ -z "${callback_apikey}" ] || [ "${callback_apikey}" == "null" ]; then
            echo "Warning: Status call backs will not be executed. Missing api key."
            callback_apikey=''
          fi
          if [ -z "${ok_callback_url}" ] || [ "${ok_callback_url}" == "null" ]; then
            echo "Warning: OK status call backs will not be executed. Missing ok url."
            ok_callback_url=''
          fi
          if [ -z "${error_callback_url}" ] || [ "${error_callback_url}" == "null" ]; then
            echo "Warning: Error status call backs will not be executed. Missing error url."
            error_callback_url=''
          fi
          if [ -z "${progress_callback_url}" ] || [ "${progress_callback_url}" == "null" ]; then
            echo "Warning: Progress status call backs will not be executed. Missing progress url."
            progress_callback_url=''
          fi

          # Ensure change from 'null' to '' is set in the environment.
          echo "ok_callback_url=${ok_callback_url}" >> $GITHUB_ENV
          echo "error_callback_url=${error_callback_url}" >> $GITHUB_ENV
          echo "progress_callback_url=${progress_callback_url}" >> $GITHUB_ENV
          echo "callback_apikey=${callback_apikey}" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Sharepoint Upload
        run: |
          cd ${{ github.workspace }}/.github/actions/upload-sharepoint
          npm install

      - name: Read fstab file
        id: fstab_data
        uses: pietrobolcato/action-read-yaml@1.1.0
        with:
          config: ${{ github.workspace }}/fstab.yaml

      - name: Set up the mountpoints and folders
        env:
          FSTAB_CONTEXT: ${{ toJson(steps.fstab_data.outputs) }}
        run: |
          echo "FSTAB_CONTEXT $FSTAB_CONTEXT"
          mountpoints='{ ';
          folders='{ ';
          foundFolders=false;
          while read line; do
            echo "line: $line"
            if (echo "$line" | grep -q 'folders:'); then
              foundFolders=true
              echo Skipping...
              continue;
            fi
            if (echo "$line" | grep -q 'mountpoints:'); then
              echo Skipping...
              continue;
            fi
            if [ -z "$line" ]; then
              echo Skipping...
              continue;
            fi
            name=$(echo "$line" | cut -f1 -d:)
            value=$(echo "$line" | cut -f2- -d: | cut -c2-)
            echo "$name and $value"
            next="\"$name\": \"$value\""
            if ($foundFolders); then
              if [ "$folders" == "{ " ]; then
                folders+="$next"
              else
                folders+=", $next"
              fi
            else
              if [ "$name" == "/" ]; then
                echo "FIRST_MP=$value" >> $GITHUB_ENV
              fi
              if [ "$mountpoints" == "{ " ]; then
                mountpoints+="$next"
              else
                mountpoints+=", $next"
              fi
            fi
          done < "${{ github.workspace }}/fstab.yaml"

          mountpoints+=' }'
          folders+=' }'
          echo "mountpoint: $mountpoints"
          echo "folder: $folders"
          echo "mountpoints=$mountpoints" >> $GITHUB_ENV
          echo "folders=$folders" >> $GITHUB_ENV

      - name: Report download progress
        run: |
          if [ -n "${{ env.progress_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
             -H "Content-Type: application/json" \
             -X POST \
             -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Downloading zip...\" }}" \
             ${{ env.progress_callback_url }}
          fi

      - name: Download import zip file
        run: |
          echo "Downloading the import zip to ${{ env.temp_dir }}..."
          curl -Lo "${{ env.temp_dir }}/import.zip" "${{ github.event.inputs.zip_url }}" 2>&1 \
           || { echo "Import zip cannot be fetched yet. Please wait a few minutes and try again."; }

      - name: Report download failure or extraction progress
        run: |
          if [ ! -f "${{ env.temp_dir }}/import.zip" ]; then
            if [ -n "${{ env.error_callback_url }}" ]; then
              curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Failed to download zip...\" }}" \
               ${{ env.error_callback_url }}
            fi
            echo " Import zip file not found. Check the output of the previous step. Exiting."
            exit 1
          fi
          
          # Zip exists, check if it is a valid zip file.
          chmod 755 "${{ env.temp_dir }}/import.zip"
          ls -hl "${{ env.temp_dir }}/import.zip"
          if ! file "${{ env.temp_dir }}/import.zip" | grep -q 'Zip archive data'; then
            if [ -n "${{ env.error_callback_url }}" ]; then
              curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \" Downloaded file is not a valid zip file. Did the URL expire (i.e. UnauthorizedDownloaded)?\" }}" \
               ${{ env.error_callback_url }}
            fi
            echo "Downloaded file is not a valid zip file.  Did the URL expire? Exiting."
            # exit 1          
          fi
          
          # Zip is good.  Report that extraction is starting.
          if [ -n "${{ env.progress_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
             -H "Content-Type: application/json" \
             -X POST \
             -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Extracting zip...\" }}" \
             ${{ env.progress_callback_url }}
          fi

      #      - name: Extract import zip contents
      #        run: |
      #          unzip ${{ env.temp_dir }}/import.zip -d "${{ env.temp_dir }}/content" \
      #          || { echo "Extraction of the Import zip failed. Please wait a few minutes and try again."; exit 1; }

      - name: Run SharePoint Upload Action
        id: sharepoint-upload-step
        uses: ./.github/actions/upload-sharepoint
        with:
          aemy_callbacks: ${{ github.event.inputs.aemy_callbacks }}
          aemy_context: ${{ github.event.inputs.aemy_context }}
          upload_source: ${{ env.temp_dir }}/content
          upload_target: ${{ env.FIRST_MP }}
          sharepoint_client_id: ${{ env.SHAREPOINT_CLIENT_ID }}
          sharepoint_tenant_id: ${{ env.SHAREPOINT_TENANT_ID }}

      - name: Analyze upload results
        run: |
          result='${{ steps.sharepoint-upload-step.outputs.result }}'
          success_count=$(echo "$result" | jq -r '.success_count')
          failed_count=$(echo "$result" | jq -r '.failed_count')
          failed_files=$(echo "$result" | jq -c '.failed_files')
          
          progress="✅ Success count: $success_count \n❌ Failed count: $failed_count \n🚨 Failed files: $failed_files"
          echo $progress
          
          if [ -n "${{ env.progress_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
             -H "Content-Type: application/json" \
             -X POST \
             -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"$progress\" }}" \
             ${{ env.progress_callback_url }}
          fi

      - name: Fail if upload fails
        if: ${{ fromJson(steps.sharepoint-upload-step.outputs.result).failed_count > 0 }}
        run: |
          failed_count=$(echo "$result" | jq -r '.failed_count')       
          success_count=$(echo "$result" | jq -r '.success_count')   
          failed_files=$(echo "$result" | jq -r '.failed_files')   
          message="Failed to upload $failed_count files. Uploaded $success_count files successfully."
          echo "Upload Failed: $message"
          echo "These files failed to upload: $failed_files"
          if [ -n "${{ env.error_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
              -X POST \
              -F 'response={"message": "$message"}' \
              ${{ env.error_callback_url }}
          fi
          exit 1

      - name: Report upload success
        run: |
          success_count=$(echo "$result" | jq -r '.success_count')      
          message="Upload succeeded. Uploaded $success_count files."
          if [ -n "${{ env.ok_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
              -X POST \
              -F 'response={"message": "$message"}' \
              ${{ env.ok_callback_url }}
          fi

      - name: Clean up temporary files
        if: always()
        run: |
          # Delete the temp dir immediately, having system delete it eventually as a redundancy.
          rm -rf "${{ env.temp_dir }}"
