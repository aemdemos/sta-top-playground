name: site-transfer-agent-coordinator - Download and extract Import zip and upload contents to SharePoint

# TODO
# Use the issue context to determine import zip (and still allow it as an optional parameter)

env:
  SHAREPOINT_CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
  SHAREPOINT_TENANT: ${{ vars.SHAREPOINT_TENANT }}
  SHAREPOINT_CLIENT_ID: ${{ vars.SHAREPOINT_CLIENT_ID }}

on:
  workflow_dispatch:
    inputs:
      # Zip is only valid for 60 minutes.
      zip_url:
        description: 'The URL of the zip file to download'
        required: true
        default: 'https://spacecat-scraper.s3.us-east-1.amazonaws.com/imports/dae1f934-97e3-4c12-8bd0-2bd951f46e72/import-result.zip?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAUDXQXZO4IHJZZHYN%2F20250331%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250331T170212Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEEAaCXVzLWVhc3QtMSJHMEUCIQDvK3%2FJPzreIq2QJr453hyiWTHLFm%2FTrgoUo7SI87N0hQIgYHzqpt6z1wBYl6nixE8rgWjpIMpBfq9%2F9Owq%2FZGTIMIqmgMIqf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwyODI4OTg5NzU2NzIiDNvw7NXOyofhI0tbLSruAoHfzhSh5UQHFCiaGXq4C8uzDEcxZwsQhhOmuxh%2BrTyQDQv6Ei7PEzasw10ncQFSyYdpWtgTuqmH2yZeaxSo0%2FgiRkxetfjX3h8LBxkATz2%2F6ijrhUj5JiNgt7Qsgl9jB5W%2FwRwMg%2BrEc4geXTDBxAyINVkRIOq1PTX8QRBR3XMbDd31WOoadnkTEYKZHacLv8pYoBLKXbtkIUjJgRGyK62P7O7FxX5e3HrDzO9IJzuT6bLLHTG4TCZCvX4SdBsc%2F7PyEIPzhawARkgUmJACp6ag%2FxOVgab6o3M9BKpGQ09dpquJKU%2BiNgwNEFT%2F2cdCq%2FTSjudWT7dkv3Afi38mwg1e5JfL3BEfi3fiX6LCbQTqIjVtQzJW6hbGQRl%2BhKwJB3BbTOFJj7wwEDv5iz0gk0jqFsLIekSCYRp2yUU6aYD%2BciwojSyZoqscTMWuxhvm0riV%2BGDySONnPE9WQ9VwOLZJqtCB3tACS2flHwrsvzD49Kq%2FBjqdAVBktOppWnRM1JCi%2BvG2oTtUotKa8kBcKalStF0A7sufB%2FS8gkwrEEouJu1Q72fITdRLOzCJjg7UFDVcvQ6ZUXVccT8Ddt%2BbWhlqPiHaOvn24RCSattUMYHuszWanuIT%2B6DUda30waLGFS3PnVGGPNu9vuJ0h5jclJrDP4itOm%2FKlNgGPcUm25X5xmLSToc72U3tHGKFtLW3ESd%2F5mM%3D&X-Amz-Signature=e92f1f9de428575f73c33eb038b9df26f6c934f97f4a50f4a6ab45b67c0f04cc&X-Amz-SignedHeaders=host&x-id=GetObject'
      aemy_callbacks:
        description: 'The AEMY context as a string.'
        required: true
        default: "{\"ok\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/ok/aemdemos/sta-top-playground/36\",\"error\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/error/aemdemos/sta-top-playground/36\",\"progress\":\"https://sta-dev-fapp-coordinator.azurewebsites.net/api/fn-ghapp/callbacks/progress/aemdemos/sta-top-playground/36\",\"apiKey\":\"bAfZqyBfo05H1ANCbxKzB1Y7KkR4yofDKI6hXNq7\"}"
      aemy_context:
        description: 'The AEMY context as a string.'
        required: true
        default: "{\"project\":{\"owner\":\"aemdemos\",\"repo\":\"sta-top-playground\",\"defaultBranch\":\"main\"},\"conversation\":{\"id\":35,\"instruction\":\"Analyzesite\",\"input\":\"\",\"plan\":[\"Site-urls\",\"Step2\"]},\"development\":{\"issueId\":35,\"branch\":\"issue-35\",\"changed\":false,\"changes\":[]},\"agentIndex\":1,\"agentCalls\":[{\"agentId\":\"ghagent\",\"function\":\"gh_create_branch\",\"parameters\":{}},{\"agentId\":\"inventory\",\"function\":\"site-urls\",\"parameters\":{\"url\":\"https://unifyrare.com/\"}},{\"agentId\":\"ghagent\",\"function\":\"gh_create_pull_request\",\"parameters\":{}},{\"agentId\":\"ghagent\",\"function\":\"gh_request_linting\",\"parameters\":{}}]}"

permissions:
  contents: write

jobs:
  read-and-upload-import-zip:
    runs-on: ubuntu-latest

    steps:
      - name: Check inputs
        run: |
          npm --version
          if [ -z "${{ env.SHAREPOINT_CLIENT_SECRET }}" ]; then
            echo "Error: SHAREPOINT_CLIENT_SECRET is not set."
            exit 1
          fi
          if [ -z "${{ env.SHAREPOINT_TENANT }}" ]; then
            echo "Error: SHAREPOINT_TENANT is not set."
            exit 1
          fi
          if [ -z "${{ env.SHAREPOINT_CLIENT_ID }}" ]; then
            echo "Error: SHAREPOINT_CLIENT_ID is not set."
            exit 1
          fi
          if [ -z "${{ github.event.inputs.zip_url }}" ]; then
            echo "Error: Import Zip URL is not set."
            exit 1
          fi
          # Create temp directory to download the zip and extract its contents into.
          temp_dir=$(mktemp -d)
          echo "temp_dir=${temp_dir}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get install -y unzip
          npm install -g @pnp/cli-microsoft365

      - name: Set up the callback URLs
        run: |
          if [ -z "${{ github.event.inputs.aemy_callbacks }}" ]; then
            echo "Warning: Status call backs will not be executed. Missing callback in the context."
          else
            callback_apikey=${{ fromJSON(github.event.inputs.aemy_callbacks).apikey }}
            ok_callback_url=${{ fromJSON(github.event.inputs.aemy_callbacks).ok }}
            error_callback_url=${{ fromJSON(github.event.inputs.aemy_callbacks).error }}
            progress_callback_url=${{ fromJSON(github.event.inputs.aemy_callbacks).progress }}
          fi
          
          echo "ok_callback_url=${ok_callback_url}"
          
          if [ -z "${callback_apikey}" ] || [ "${callback_apikey}" == "null" ]; then
            echo "Warning: Status call backs will not be executed. Missing api key."
            callback_apikey=''
          fi
          if [ -z "${ok_callback_url}" ] || [ "${ok_callback_url}" == "null" ]; then
            echo "Warning: OK status call backs will not be executed. Missing ok url."
            ok_callback_url=''
          fi
          if [ -z "${error_callback_url}" ] || [ "${error_callback_url}" == "null" ]; then
            echo "Warning: Error status call backs will not be executed. Missing error url."
            error_callback_url=''
          fi
          if [ -z "${progress_callback_url}" ] || [ "${progress_callback_url}" == "null" ]; then
            echo "Warning: Progress status call backs will not be executed. Missing progress url."
            progress_callback_url=''
          fi

          # Ensure change from 'null' to '' is set in the environment.
          echo "ok_callback_url=${ok_callback_url}" >> $GITHUB_ENV
          echo "error_callback_url=${error_callback_url}" >> $GITHUB_ENV
          echo "progress_callback_url=${progress_callback_url}" >> $GITHUB_ENV
          echo "callback_apikey=${callback_apikey}" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Sharepoint Upload
        run: |
          cd ${{ github.workspace }}/.github/actions/upload-sharepoint
          npm install

      - name: Read fstab file
        id: fstab_data
        uses: pietrobolcato/action-read-yaml@1.1.0
        with:
          config: ${{ github.workspace }}/fstab.yaml

      - name: Set up the mountpoints and folders
        env:
          FSTAB_CONTEXT: ${{ toJson(steps.fstab_data.outputs) }}
        run: |
          echo "FSTAB_CONTEXT $FSTAB_CONTEXT"
          mountpoints='{ ';
          folders='{ ';
          foundFolders=false;
          while read line; do
            echo "line: $line"
            if (echo "$line" | grep -q 'folders:'); then
              foundFolders=true
              echo Skipping...
              continue;
            fi
            if (echo "$line" | grep -q 'mountpoints:'); then
              echo Skipping...
              continue;
            fi
            if [ -z "$line" ]; then
              echo Skipping...
              continue;
            fi
            name=$(echo "$line" | cut -f1 -d:)
            value=$(echo "$line" | cut -f2- -d: | cut -c2-)
            echo "$name and $value"
            next="\"$name\": \"$value\""
            if ($foundFolders); then
              if [ "$folders" == "{ " ]; then
                folders+="$next"
              else
                folders+=", $next"
              fi
            else
              if [ "$mountpoints" == "{ " ]; then
                echo "FIRST_MP=$next" >> $GITHUB_ENV
                mountpoints+="$next"
              else
                mountpoints+=", $next"
              fi
            fi
          done < "${{ github.workspace }}/fstab.yaml"

          mountpoints+=' }'
          folders+=' }'
          echo "mountpoint: $mountpoints"
          echo "folder: $folders"
          echo "mountpoints=$mountpoints" >> $GITHUB_ENV
          echo "folders=$folders" >> $GITHUB_ENV

      - name: Report download progress
        run: |
          if [ -n "${{ env.progress_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
             -H "Content-Type: application/json" \
             -X POST \
             -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Downloading zip...\" }}" \
             ${{ env.progress_callback_url }}
          fi

      - name: Download import zip file
        run: |
          echo "Downloading the import zip to ${{ env.temp_dir }}..."
          curl -Lo "${{ env.temp_dir }}/import.zip" "${{ github.event.inputs.zip_url }}" 2>&1 \
           || { echo "Import zip cannot be fetched yet. Please wait a few minutes and try again."; }

      - name: Report download failure or extraction progress
        run: |
          if [ ! -f "${{ env.temp_dir }}/import.zip" ]; then
            if [ -n "${{ env.error_callback_url }}" ]; then
              curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Failed to download zip...\" }}" \
               ${{ env.error_callback_url }}
            fi
            echo " Import zip file not found. Check the output of the previous step. Exiting."
            exit 1
          fi
          
          # Zip exists, check if it is a valid zip file.
          chmod 755 "${{ env.temp_dir }}/import.zip"
          ls -hl "${{ env.temp_dir }}/import.zip"
          if ! file "${{ env.temp_dir }}/import.zip" | grep -q 'Zip archive data'; then
            if [ -n "${{ env.error_callback_url }}" ]; then
              curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Downloaded file is not a valid zip file. Did the URL expire (i.e. UnauthorizedDownloaded)?\" }}" \
               ${{ env.error_callback_url }}
            fi
            echo "Downloaded file is not a valid zip file.  Did the URL expire? Exiting."
            exit 1          
          fi
          
          # Zip is good.  Report that extraction is starting.
          if [ -n "${{ env.progress_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
             -H "Content-Type: application/json" \
             -X POST \
             -d "{\"context\": \"${{ github.event.inputs.aemy_context }}\", \"response\": { \"message\": \"Extracting zip...\" }}" \
             ${{ env.progress_callback_url }}
          fi

      - name: Extract import zip contents
        run: |
          unzip ${{ env.temp_dir }}/import.zip -d "${{ env.temp_dir }}/content" \
          || { echo "Extraction of the Import zip failed. Please wait a few minutes and try again."; exit 1; }

      # - name: Get Sharepoint access token
        # run: |
          #  wwwauthenticate=$(curl -i -H "Authorization: Bearer" -s "https://${{ env.SHAREPOINT_TENANT }}.sharepoint.com/_vti_bin/client.svc/" | grep -i "www-authenticate")
          #  bearer_realm=$(echo ${wwwauthenticate} | awk -F"," '{print $1}' | awk -F"=" '{print $2}' | tr -d '"')
          #  app_id=$(echo ${wwwauthenticate} | awk -F"," '{print $2}' | awk -F"=" '{print $2}'  | tr -d '"')
          #
          #  access_token=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" \
          #    --data-urlencode "grant_type=client_credentials" \
          #    --data-urlencode "client_id=${{ env.SHAREPOINT_CLIENT_ID }}@$bearer_realm" \
          #    --data-urlencode "client_secret=${{ env.SHAREPOINT_CLIENT_SECRET }}" \
          #    --data-urlencode "resource=$app_id/${{ env.SHAREPOINT_TENANT }}.sharepoint.com@$bearer_realm" \
          #    -s "https://accounts.accesscontrol.windows.net/$bearer_realm/tokens/OAuth/2" | awk -F":" '{print $NF}' | tr -d '"}')
          #  echo "access_token=${access_token}" >> $GITHUB_ENV

      - name: Upload content to SharePoint
        id: sharepoint-upload-step
        uses: ./.github/actions/upload-sharepoint
        with:
          aemy_callbacks: ${{ github.event.inputs.aemy_callbacks }}
          aemy_context: ${{ github.event.inputs.aemy_context }}
          upload_source: ${{ env.temp_dir }}/content
          upload_target: ${{ env.FIRST_MP }}

      - name: Report upload success
        if: success()
        run: |
          echo "Upload Succeeded: ${{ steps.sharepoint-upload-step.outputs.message }}"
          if [ -n "${{ env.ok_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
              -X POST \
              -F 'response={"message": "${{ steps.sharepoint-upload-step.outputs.success_message }}"}' \
              ${{ env.ok_callback_url }}
          fi

      - name: Report upload failure
        if: failure()
        run: |
          echo "Upload Failure: ${{ steps.sharepoint-upload-step.outputs.result }}"
          if [ -n "${{ env.error_callback_url }}" ]; then
            curl -H "x-api-key: ${{ github.event.inputs.callback_api_key }}" \
              -X POST \
              -F 'response={"message": "${{ steps.sharepoint-upload-step.outputs.result.message }}"}' \
              ${{ env.error_callback_url }}
          fi

      - name: Clean up temporary files
        if: always()
        run: |
          # Delete the temp dir immediately, having system delete it eventually as a redundancy.
          rm -rf "${{ env.temp_dir }}"
